SOLID:

S:单一职责原则 (Single Responsibility Principle)
一个类或者模块只负责完成一个职责

O:开闭原则 (Open Closed Principle)
对扩展开放,对修改关闭.
添加一个新的功能应该是，在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）。

L:里式替换原则 (Liskov Substitution Principle)
子类对象能够替换程序中父类对象出现的任何地方，并且保证原来程序的逻辑行为不变及正确性不被破坏。

I:接口隔离原则 (Interface Segregation Principle)
客户端不应该强迫依赖它不需要的接口
接口方法与接口本身的关系不明确。接口的实现者就会实现不属于他的功能。

D:依赖反转原则 (Dependency Inversion Principle)
高层模块不要依赖低层模块。高层模块和低层模块应该通过抽象来互相依赖。除此
之外，抽象不要依赖具体实现细节，具体实现细节依赖抽象
在调用链上,调用者属于高层,被调用者属于底层.
